{"version":3,"sources":["SortingAlgorithms/InsertionSort/insertionSort.js","SortingAlgorithms/InsertionSort/insertionSortAnimation.js","SortingAlgorithms/MergeSort/mergeSort.js","SortingAlgorithms/MergeSort/mergeSortAnimation.js","SortingAlgorithms/QuickSort/quickSort.js","SortingAlgorithms/QuickSort/quickSortAnimation.js","SortingAlgorithms/HeapSort/heapSort.js","SortingAlgorithms/HeapSort/heapSortAnimation.js","SortingAlgorithms/SelectionSort/selectionSort.js","SortingAlgorithms/SelectionSort/selectionSortAnimation.js","SortingAlgorithms/BubbleSort/bubbleSort.js","SortingAlgorithms/BubbleSort/bubbleSortAnimation.js","SortingAlgorithms/MergeInsertionSort/mergeInsertionSort.js","SortingAlgorithms/MergeInsertionSort/mergeInsertionSortAnimation.js","data.js","SortingVisualizer/SortingVisualizer.js","Utilities/utilities.js","Footer/Footer.js","App.js","index.js"],"names":["swap","arr","i","j","temp","insertionSort","animations","length","push","insertionSortAnimation","array","animationSpeed","insertionSortAlgo","arrayBars","document","getElementsByClassName","setTimeout","style","backgroundColor","bar1Index","bar2Index","bar1Style","bar2Style","color","barIndex","newHeight","height","mergeSortHelper","auxiliaryArray","leftStart","rightEnd","middle","Math","floor","mergeSortedHalves","leftEnd","leftPointer","rightPointer","tempPointer","mergeSort","slice","mergeSortAnimation","mergeSortAlgo","quickSort","quickSortAnimation","quickSortAlgo","heapSort","heapSortAnimation","heapSortAlgo","selectionSort","selectionSortAnimation","selectionSortAlgo","bubbleSort","bubbleSortAnimation","bubbleSortAlgo","mergeInsertionSort","mergeInsertionSortAnimation","mergeInsertionSortAlgo","getAlgo","SortingVisualizer","useState","setArray","setAnimationSpeed","window","innerHeight","windowHeight","setWindowHeight","innerWidth","windowWidth","setWindowWidth","numArrayBars","setNumArrayBars","updateScreenValue","useEffect","resetArray","addEventListener","removeEventListener","min","max","ceil","random","sortingAlgoNames","sortingAlgorithms","className","onClick","map","algoName","index","type","step","onChange","slider","value","background","Footer","url","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9df38de1.chunk.js","sourcesContent":["const insertionSort = (arr) => {\n  const animations = [];\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i; j > 0; j--) {\n      // push it twice to be able to convert and revert color\n      animations.push([j, j - 1, true]);\n      animations.push([j, j - 1, true]);\n      if (arr[j - 1] <= arr[j]) {\n        break;\n      }\n\n      swap(arr, j, j - 1);\n      // swap animation\n      animations.push([j, arr[j], false]);\n      animations.push([j - 1, arr[j - 1], false]);\n    }\n  }\n  return animations;\n};\n\nconst swap = (arr, i, j) => {\n  let temp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = temp;\n};\n\nexport default insertionSort;\n","import insertionSortAlgo from \"./insertionSort\";\n\nconst PRIMARY_COLOR = \"slateblue\";\n\nconst SECONDARY_COLOR = \"wheat\";\n\nconst NEUTRAL_COLOR = \"#ccc\";\n\nconst insertionSortAnimation = (array, animationSpeed) => {\n  // testInsertionSort(array);\n  const animations = insertionSortAlgo(array);\n\n  for (let i = 0; i < array.length; i++) {\n    const arrayBars = document.getElementsByClassName(\"bar\");\n    setTimeout(() => {\n      arrayBars[i].style.backgroundColor = NEUTRAL_COLOR;\n    }, (i * animationSpeed) / 10);\n  }\n\n  for (let i = 0; i < animations.length; i++) {\n    const arrayBars = document.getElementsByClassName(\"bar\");\n    const [, , isCompare] = animations[i];\n    if (isCompare) {\n      // compare animation\n      const [bar1Index, bar2Index] = animations[i];\n      const bar1Style = arrayBars[bar1Index].style;\n      const bar2Style = arrayBars[bar2Index].style;\n      const color = i % 2 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n      setTimeout(() => {\n        bar1Style.backgroundColor = bar2Style.backgroundColor = color;\n      }, i * animationSpeed);\n    } else {\n      // swap animation\n      setTimeout(() => {\n        const [barIndex, newHeight] = animations[i];\n        const barStyle = arrayBars[barIndex].style;\n        barStyle.height = `${newHeight}px`;\n      }, i * animationSpeed);\n    }\n  }\n};\n\nexport default insertionSortAnimation;\n","const mergeSort = (arr) => {\n  if (arr.length <= 1) return arr;\n  const animations = [];\n  const auxiliaryArray = arr.slice();\n  mergeSortHelper(arr, auxiliaryArray, 0, arr.length - 1, animations);\n  return animations;\n};\n\nconst mergeSortHelper = (\n  arr,\n  auxiliaryArray,\n  leftStart,\n  rightEnd,\n  animations\n) => {\n  if (leftStart >= rightEnd) {\n    return;\n  }\n  // divide into two roughly equal halves\n  const middle = Math.floor((leftStart + rightEnd) / 2);\n\n  // mergesort left half\n  mergeSortHelper(auxiliaryArray, arr, leftStart, middle, animations);\n\n  // mergesort right half\n  mergeSortHelper(auxiliaryArray, arr, middle + 1, rightEnd, animations);\n\n  // sort the two sorted halves\n  mergeSortedHalves(\n    arr,\n    auxiliaryArray,\n    leftStart,\n    middle,\n    rightEnd,\n    animations\n  );\n};\n\nconst mergeSortedHalves = (\n  arr,\n  auxiliaryArray,\n  leftStart,\n  leftEnd,\n  rightEnd,\n  animations\n) => {\n  let leftPointer = leftStart;\n  let rightPointer = leftEnd + 1;\n  let tempPointer = leftStart;\n\n  while (leftPointer <= leftEnd && rightPointer <= rightEnd) {\n    // push it twice to convert and revert color\n    animations.push([leftPointer, rightPointer, true]);\n    animations.push([leftPointer, rightPointer, true]);\n\n    if (auxiliaryArray[leftPointer] <= auxiliaryArray[rightPointer]) {\n      // copy elem of auxiliaryArr at leftPointer to original array at tempPointer\n      animations.push([tempPointer, auxiliaryArray[leftPointer], false]);\n      arr[tempPointer] = auxiliaryArray[leftPointer];\n      leftPointer++;\n    } else {\n      // copy elem of auxiliaryArr at rightPointer to original array at tempPointer\n      animations.push([tempPointer, auxiliaryArray[rightPointer], false]);\n      arr[tempPointer] = auxiliaryArray[rightPointer];\n      rightPointer++;\n    }\n    tempPointer++;\n  }\n\n  // if either left or right pointer are out of bound copy rest of the elems of non-empty array\n  while (leftPointer <= leftEnd) {\n    // push twice to convert and revert their color\n    animations.push([leftPointer, leftPointer, true]);\n    animations.push([leftPointer, leftPointer, true]);\n\n    // copy elem of auxiliaryArr at leftPointer to original array at tempPointer\n    animations.push([tempPointer, auxiliaryArray[leftPointer], false]);\n    arr[tempPointer] = auxiliaryArray[leftPointer];\n    leftPointer++;\n    tempPointer++;\n  }\n\n  while (rightPointer <= rightEnd) {\n    // push twice to convert and revert their color\n    animations.push([rightPointer, rightPointer, true]);\n    animations.push([rightPointer, rightPointer, true]);\n\n    // copy elem of auxiliaryArr at rightPointer to original array at tempPointer\n    animations.push([tempPointer, auxiliaryArray[rightPointer], false]);\n    arr[tempPointer] = auxiliaryArray[rightPointer];\n    rightPointer++;\n    tempPointer++;\n  }\n\n  // copy the sorted auxiliaryArray back to the original array\n  // for (let i = leftStart; i <= rightEnd; i++) {\n  //   arr[i] = auxiliaryArray[i];\n  // }\n};\n\nexport default mergeSort;\n","import mergeSortAlgo from \"./mergeSort\";\n\nconst PRIMARY_COLOR = \"slateblue\";\n\nconst SECONDARY_COLOR = \"wheat\";\n\nconst NEUTRAL_COLOR = \"#ccc\";\n\nconst mergeSortAnimation = (array, animationSpeed) => {\n  // testMergeSort(array);\n  const animations = mergeSortAlgo(array);\n\n  for (let i = 0; i < array.length; i++) {\n    const arrayBars = document.getElementsByClassName(\"bar\");\n    setTimeout(() => {\n      arrayBars[i].style.backgroundColor = NEUTRAL_COLOR;\n    }, (i * animationSpeed) / 10);\n  }\n\n  for (let i = 0; i < animations.length; i++) {\n    const arrayBars = document.getElementsByClassName(\"bar\");\n    const [, , isCompare] = animations[i];\n    if (isCompare) {\n      // compare animation\n      const [bar1Index, bar2Index] = animations[i];\n      const bar1Style = arrayBars[bar1Index].style;\n      const bar2Style = arrayBars[bar2Index].style;\n      const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n      setTimeout(() => {\n        bar1Style.backgroundColor = bar2Style.backgroundColor = color;\n      }, i * animationSpeed);\n    } else {\n      // swap animation\n      setTimeout(() => {\n        const [barIndex, newHeight] = animations[i];\n        const barStyle = arrayBars[barIndex].style;\n        barStyle.height = `${newHeight}px`;\n      }, i * animationSpeed);\n    }\n  }\n};\n\nexport default mergeSortAnimation;\n","const quickSort = (arr) => {};\n\nexport default quickSort;\n","import quickSortAlgo from \"./quickSort\";\n// import testInsertionSort from \"../SortingAlgorithmsTest/insertionSortTest\";\n\n// const PRIMARY_COLOR = \"slateblue\";\n\n// const SECONDARY_COLOR = \"wheat\";\n\n// const NEUTRAL_COLOR = \"#ccc\";\n\nconst quickSortAnimation = (array, animationSpeed) => {\n  // testMergeSort(array);\n  quickSortAlgo(array);\n};\n\nexport default quickSortAnimation;\n","const heapSort = (arr) => {};\n\nexport default heapSort;\n","import heapSortAlgo from \"./heapSort\";\n// import testInsertionSort from \"../SortingAlgorithmsTest/insertionSortTest\";\n\n// const PRIMARY_COLOR = \"slateblue\";\n\n// const SECONDARY_COLOR = \"wheat\";\n\n// const NEUTRAL_COLOR = \"#ccc\";\n\nconst heapSortAnimation = (array, animationSpeed) => {\n  // testMergeSort(array);\n  heapSortAlgo(array);\n};\n\nexport default heapSortAnimation;\n","const selectionSort = (arr) => {};\n\nexport default selectionSort;\n","import selectionSortAlgo from \"./selectionSort\";\n// import testInsertionSort from \"../SortingAlgorithmsTest/insertionSortTest\";\n\n// const PRIMARY_COLOR = \"slateblue\";\n\n// const SECONDARY_COLOR = \"wheat\";\n\n// const NEUTRAL_COLOR = \"#ccc\";\n\nconst selectionSortAnimation = (array, animationSpeed) => {\n  // testMergeSort(array);\n  selectionSortAlgo(array);\n};\n\nexport default selectionSortAnimation;\n","const bubbleSort = (arr) => {};\n\nexport default bubbleSort;\n","import bubbleSortAlgo from \"./bubbleSort\";\n// import testInsertionSort from \"../SortingAlgorithmsTest/insertionSortTest\";\n\n// const PRIMARY_COLOR = \"slateblue\";\n\n// const SECONDARY_COLOR = \"wheat\";\n\n// const NEUTRAL_COLOR = \"#ccc\";\n\nconst bubbleSortAnimation = (array, animationSpeed) => {\n  // testMergeSort(array);\n  bubbleSortAlgo(array);\n};\n\nexport default bubbleSortAnimation;\n","const mergeInsertionSort = (arr) => {};\n\nexport default mergeInsertionSort;\n","import mergeInsertionSortAlgo from \"./mergeInsertionSort\";\n// import testInsertionSort from \"../SortingAlgorithmsTest/insertionSortTest\";\n\n// const PRIMARY_COLOR = \"slateblue\";\n\n// const SECONDARY_COLOR = \"wheat\";\n\n// const NEUTRAL_COLOR = \"#ccc\";\n\nconst mergeInsertionSortAnimation = (array, animationSpeed) => {\n  // testMergeSort(array);\n  mergeInsertionSortAlgo(array);\n};\n\nexport default mergeInsertionSortAnimation;\n","import insertionSortAnimation from \"./SortingAlgorithms/InsertionSort/insertionSortAnimation\";\nimport mergeSortAnimation from \"./SortingAlgorithms/MergeSort/mergeSortAnimation\";\nimport quickSortAnimation from \"./SortingAlgorithms/QuickSort/quickSortAnimation\";\nimport heapSortAnimation from \"./SortingAlgorithms/HeapSort/heapSortAnimation\";\nimport selectionSortAnimation from \"./SortingAlgorithms/SelectionSort/selectionSortAnimation\";\nimport bubbleSortAnimation from \"./SortingAlgorithms/BubbleSort/bubbleSortAnimation\";\nimport mergeInsertionSortAnimation from \"./SortingAlgorithms/MergeInsertionSort/mergeInsertionSortAnimation\";\n\nconst getAlgo = (array, animationSpeed) => {\n  const sortingAlgoNames = [\n    \"Insertion Sort\",\n    \"Merge Sort\",\n    \"Quick Sort\",\n    \"Heap Sort\",\n    \"Selection Sort\",\n    \"Bubble Sort\",\n    \"Merge Insertion Sort\",\n  ];\n\n  const sortingAlgorithms = [\n    () => insertionSortAnimation(array, animationSpeed),\n    () => mergeSortAnimation(array, animationSpeed),\n    () => quickSortAnimation(array, animationSpeed),\n    () => heapSortAnimation(array, animationSpeed),\n    () => selectionSortAnimation(array, animationSpeed),\n    () => bubbleSortAnimation(array, animationSpeed),\n    () => mergeInsertionSortAnimation(array, animationSpeed),\n  ];\n\n  return [sortingAlgoNames, sortingAlgorithms];\n};\n\nexport default getAlgo;\n","import React, { useEffect, useState } from \"react\";\nimport getAlgo from \"../data\";\nimport { getRandomInt } from \"../Utilities/utilities\";\nimport \"./SortingVisualizer.css\";\n\nfunction SortingVisualizer() {\n  const [array, setArray] = useState([]);\n  const [animationSpeed, setAnimationSpeed] = useState(50);\n  const [windowHeight, setWindowHeight] = useState(window.innerHeight);\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n  const [numArrayBars, setNumArrayBars] = useState(windowWidth / 20);\n\n  const updateScreenValue = () => {\n    setWindowWidth(window.innerHeight);\n    setWindowHeight(window.innerHeight);\n    setNumArrayBars(windowWidth / 20);\n  };\n\n  useEffect(() => {\n    resetArray();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", updateScreenValue);\n    return () => {\n      window.removeEventListener(\"resize\", updateScreenValue);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const resetArray = () => {\n    const array = [];\n    for (let i = 0; i < numArrayBars; i++) {\n      array.push(getRandomInt(5, windowHeight - 120));\n    }\n    // const array = [3, 2, 8, 11, 1, 12];\n    // const array = [3, 2, 11, 1];\n    setArray(array);\n  };\n\n  const [sortingAlgoNames, sortingAlgorithms] = getAlgo(array, animationSpeed);\n\n  const changeAnimationSpeed = () => {\n    const slider = document.getElementsByClassName(\"slider\")[0];\n    setAnimationSpeed(100 - slider.value);\n    const color = `linear-gradient(90deg, slateblue ${slider.value}%, rosybrown ${slider.value}%)`;\n    slider.style.background = color;\n  };\n\n  return (\n    <>\n      <div className=\"btn-container\">\n        <button className=\"btn\" onClick={resetArray}>\n          Generate New Array\n        </button>\n        {sortingAlgoNames.map((algoName, index) => {\n          return (\n            <button\n              key={index}\n              className=\"btn\"\n              onClick={sortingAlgorithms[index]}\n            >\n              {algoName}\n            </button>\n          );\n        })}\n      </div>\n      <div className=\"slider-container\">\n        <input\n          type=\"range\"\n          min=\"1\"\n          max=\"100\"\n          step=\"1\"\n          className=\"slider\"\n          onChange={changeAnimationSpeed}\n        />\n      </div>\n      <div className=\"bar-wrapper\">\n        <div className=\"bar-container\">\n          {array.map((value, index) => {\n            return (\n              <div className=\"bar\" style={{ height: `${value}px` }} key={index}>\n                {/* {value} */}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default SortingVisualizer;\n","export const getRandomInt = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nexport const areArraysEqual = (arr1, arr2) => {\n  if (arr1.length !== arr2.length) return false;\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i] !== arr2[i]) return false;\n  }\n  return true;\n};\n","import React from \"react\";\nimport { SocialIcon } from \"react-social-icons\";\nimport \"./Footer.css\";\n\nfunction Footer() {\n  return (\n    <section className=\"footer\">\n      <footer>\n        <SocialIcon url=\"https://www.github.com/DirajThajali/sorting-visualizer\" />\n      </footer>\n    </section>\n  );\n}\n\nexport default Footer;\n","import \"./App.css\";\nimport SortingVisualizer from \"./SortingVisualizer/SortingVisualizer\";\nimport Footer from \"./Footer/Footer\";\n\nfunction App() {\n  return (\n    <div>\n      <SortingVisualizer />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}