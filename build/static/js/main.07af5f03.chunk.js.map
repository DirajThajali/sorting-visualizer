{"version":3,"sources":["SortingAlgorithms/mergeSort.js","SortingAlgorithms/insertionSort.js","SortingVisualizer/SortingVisualizer.js","Utilities/utilities.js","App.js","index.js"],"names":["mergeSortHelper","arr","auxiliaryArray","leftStart","rightEnd","middle","Math","floor","mergeSortedHalves","leftEnd","leftPointer","rightPointer","tempPointer","mergeSort","length","slice","swap","i","j","temp","insertionSort","animations","push","SortingVisualizer","useState","array","setArray","animationSpeed","setAnimationSpeed","window","innerHeight","windowHeight","setWindowHeight","innerWidth","windowWidth","setWindowWidth","numArrayBars","setNumArrayBars","updateScreenValue","useEffect","resetArray","addEventListener","removeEventListener","min","max","ceil","random","className","onClick","insertionSortAlgo","arrayBars","document","getElementsByClassName","setTimeout","style","backgroundColor","bar1Index","bar2Index","bar1Style","bar2Style","color","barIndex","newHeight","height","mergeSortAlgo","type","step","onChange","slider","value","background","map","index","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.07af5f03.chunk.js","sourcesContent":["const mergeSort = (arr) => {\n  if (arr.length <= 1) return arr;\n  const auxiliaryArray = arr.slice();\n  mergeSortHelper(arr, auxiliaryArray, 0, arr.length - 1);\n};\n\nconst mergeSortHelper = (arr, auxiliaryArray, leftStart, rightEnd) => {\n  if (leftStart >= rightEnd) {\n    return;\n  }\n  // divide into two roughly equal halves\n  const middle = Math.floor((leftStart + rightEnd) / 2);\n\n  // mergesort left half\n  mergeSortHelper(auxiliaryArray, arr, leftStart, middle);\n\n  // mergesort right half\n  mergeSortHelper(auxiliaryArray, arr, middle + 1, rightEnd);\n\n  // sort the two sorted halves\n  mergeSortedHalves(arr, auxiliaryArray, leftStart, middle, rightEnd);\n};\n\nconst mergeSortedHalves = (\n  arr,\n  auxiliaryArray,\n  leftStart,\n  leftEnd,\n  rightEnd\n) => {\n  let leftPointer = leftStart;\n  let rightPointer = leftEnd + 1;\n  let tempPointer = leftStart;\n\n  while (leftPointer <= leftEnd && rightPointer <= rightEnd) {\n    if (auxiliaryArray[leftPointer] <= auxiliaryArray[rightPointer]) {\n      arr[tempPointer] = auxiliaryArray[leftPointer];\n      leftPointer++;\n    } else {\n      arr[tempPointer] = auxiliaryArray[rightPointer];\n      rightPointer++;\n    }\n    tempPointer++;\n  }\n\n  // if either left or right pointer are out of bound copy rest of the elems of non-empty array\n  while (leftPointer <= leftEnd) {\n    arr[tempPointer] = auxiliaryArray[leftPointer];\n    leftPointer++;\n    tempPointer++;\n  }\n\n  while (rightPointer <= rightEnd) {\n    arr[tempPointer] = auxiliaryArray[rightPointer];\n    rightPointer++;\n    tempPointer++;\n  }\n\n  // copy the sorted auxiliaryArray back to the original array\n  // for (let i = leftStart; i <= rightEnd; i++) {\n  //   arr[i] = auxiliaryArray[i];\n  // }\n};\n\nexport default mergeSort;\n","const insertionSort = (arr) => {\n  const animations = [];\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i; j > 0; j--) {\n      // push it twice to be able to convert and revert color\n      animations.push([j, j - 1, true]);\n      animations.push([j, j - 1, true]);\n      if (arr[j - 1] <= arr[j]) {\n        break;\n      }\n\n      swap(arr, j, j - 1);\n      // swap animation\n      animations.push([j, arr[j], false]);\n      animations.push([j - 1, arr[j - 1], false]);\n    }\n  }\n  return animations;\n};\n\nconst swap = (arr, i, j) => {\n  let temp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = temp;\n};\n\nexport default insertionSort;\n","import React, { useEffect, useState } from \"react\";\nimport mergeSortAlgo from \"../SortingAlgorithms/mergeSort\";\n// import testMergeSort from \"../SortingAlgorithmsTest/mergeSortTest\";\nimport insertionSortAlgo from \"../SortingAlgorithms/insertionSort\";\n// import testInsertionSort from \"../SortingAlgorithmsTest/insertionSortTest\";\nimport { getRandomInt } from \"../Utilities/utilities\";\nimport \"./SortingVisualizer.css\";\n\nconst PRIMARY_COLOR = \"slateblue\";\n\nconst SECONDARY_COLOR = \"wheat\";\n\nconst NEUTRAL_COLOR = \"#ccc\";\n\nfunction SortingVisualizer() {\n  const [array, setArray] = useState([]);\n  const [animationSpeed, setAnimationSpeed] = useState(50);\n  const [windowHeight, setWindowHeight] = useState(window.innerHeight);\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n  const [numArrayBars, setNumArrayBars] = useState(windowWidth / 20);\n\n  const updateScreenValue = () => {\n    setWindowWidth(window.innerHeight);\n    setWindowHeight(window.innerHeight);\n    setNumArrayBars(windowWidth / 20);\n  };\n\n  useEffect(() => {\n    resetArray();\n    window.addEventListener(\"resize\", updateScreenValue);\n    return () => {\n      window.removeEventListener(\"resize\", updateScreenValue);\n    };\n  }, [window.innerWidth]);\n\n  const resetArray = () => {\n    const array = [];\n    for (let i = 0; i < numArrayBars; i++) {\n      array.push(getRandomInt(5, windowHeight - 120));\n    }\n    // const array = [3, 2, 8, 11, 1, 12];\n    // const array = [3, 2, 11, 1];\n    setArray(array);\n  };\n\n  const mergeSort = () => {\n    // testMergeSort(array);\n    mergeSortAlgo(array);\n  };\n\n  const insertionSort = () => {\n    // testInsertionSort(array);\n    const animations = insertionSortAlgo(array);\n\n    for (let i = 0; i < array.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"bar\");\n      setTimeout(() => {\n        arrayBars[i].style.backgroundColor = NEUTRAL_COLOR;\n      }, (i * animationSpeed) / 10);\n    }\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"bar\");\n      const [, , isCompare] = animations[i];\n      if (isCompare) {\n        // compare animation\n        const [bar1Index, bar2Index] = animations[i];\n        const bar1Style = arrayBars[bar1Index].style;\n        const bar2Style = arrayBars[bar2Index].style;\n        const color = i % 2 == 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          bar1Style.backgroundColor = bar2Style.backgroundColor = color;\n        }, i * animationSpeed);\n      } else {\n        // swap animation\n        setTimeout(() => {\n          const [barIndex, newHeight] = animations[i];\n          const barStyle = arrayBars[barIndex].style;\n          barStyle.height = `${newHeight}px`;\n        }, i * animationSpeed);\n      }\n    }\n  };\n  const quickSort = () => {};\n  const heapSort = () => {};\n  const bubbleSort = () => {};\n\n  const changeAnimationSpeed = () => {\n    const slider = document.getElementsByClassName(\"slider\")[0];\n    setAnimationSpeed(100 - slider.value);\n    const color = `linear-gradient(90deg, slateblue ${slider.value}%, rosybrown ${slider.value}%)`;\n    slider.style.background = color;\n  };\n\n  return (\n    <>\n      <div className=\"btn-container\">\n        <button className=\"btn\" onClick={resetArray}>\n          Generate New Array\n        </button>\n        <button className=\"btn\" onClick={insertionSort}>\n          Insertion Sort\n        </button>\n        <button className=\"btn\" onClick={mergeSort}>\n          Merge Sort\n        </button>\n        <button className=\"btn\" onClick={quickSort}>\n          Quick Sort\n        </button>\n        <button className=\"btn\" onClick={heapSort}>\n          Heap Sort\n        </button>\n        <button className=\"btn\" onClick={bubbleSort}>\n          Bubble Sort\n        </button>\n      </div>\n      <div className=\"slider-container\">\n        <input\n          type=\"range\"\n          min=\"1\"\n          max=\"100\"\n          step=\"1\"\n          className=\"slider\"\n          onChange={changeAnimationSpeed}\n        />\n      </div>\n      <div className=\"bar-wrapper\">\n        <div className=\"bar-container\">\n          {array.map((value, index) => {\n            return (\n              <div className=\"bar\" style={{ height: `${value}px` }} key={index}>\n                {/* {value} */}\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default SortingVisualizer;\n","export const getRandomInt = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nexport const areArraysEqual = (arr1, arr2) => {\n  if (arr1.length !== arr2.length) return false;\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i] !== arr2[i]) return false;\n  }\n  return true;\n};\n","import \"./App.css\";\nimport SortingVisualizer from \"./SortingVisualizer/SortingVisualizer\";\n\nfunction App() {\n  return (\n    <div>\n      <SortingVisualizer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}